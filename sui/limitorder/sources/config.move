// Copyright (C) Cetus Technology Limited

#[allow(unused_type_parameter, unused_field, unused_const, unused_use)]
// The factory module is provided to create and manage limit order pools.
// The `OrderPools` is a singleton, and it is initialized when the contract is deployed.
// The pools are organized in a linked list, and the key is generated by hash([coin_type_a + coin_type_b]). The details can be found in `new_pool_key` function.
// When creating a pool, the `CoinTypeA` and `CoinTypeB` must be different, and the `CoinTypeA` must be the bigger one (string order).
module limit_order::config {
    use std::type_name::TypeName;
    use std::ascii::String;

    use sui::object::{ID, UID};
    use sui::tx_context::TxContext;

    use limit_order::acl;

    // === Constants ===

    // Package version
    const VERSION: u64 = 1;

    // Limit order ACL roles
    const ACL_TOKEN_WHITE_LIST_MANAGER: u8 = 0;
    const ACL_KEEPER: u8 = 1;

    // === Errors ===

    const EPackageVersionDeprecate: u64 = 0;
    const ENoTokenWhiteListManagerPermission: u64 = 1;
    const ENoLoanManagerPermission: u64 = 2;
    const ENotInTokenWhiteList: u64 = 3;

    // === Structs ===

    struct AdminCap has key, store {
        id: UID,
    }

    struct GlobalConfig has key, store {
        id: UID,
        acl: acl::ACL,
        // Limit minimum trade quantity about one token when it used to pay.
        token_white_list: vector<u8>, // Simplified for interface
        deletion_grace_period: u64,
        // Manage the switch on flash loan auth
        require_flash_loan_auth: bool,
        require_check_token_white_list: bool,
        package_version: u64,
    }

    // === Events ===

    // Emit when initializing factory module.
    struct InitFactoryEvent has copy, drop {
        admin_cap_id: ID,
        global_config_id: ID,
    }

    // Emit when setting roles
    struct SetRolesEvent has copy, drop {
        member: address,
        roles: u128,
    }

    // Emit when adding a role to a member
    struct AddRoleEvent has copy, drop {
        member: address,
        role: u8,
    }

    // Emit when removing a role from a member
    struct RemoveRoleEvent has copy, drop {
        member: address,
        role: u8
    }

    // Emit when adding a member
    struct RemoveMemberEvent has copy, drop {
        member: address,
    }

    // Emit when updating package version.
    struct SetPackageVersion has copy, drop {
        new_version: u64,
        old_version: u64
    }

    // Emit when adding an item to the token white list.
    struct AddTokenEvent has copy, drop {
        token: String,
        min_trade_amount: u64,
    }

    struct RemoveTokenEvent has copy, drop {
        token: String,
    }

    struct SetConfigDeletionGracePeriod has copy, drop {
        deletion_grace_period: u64,
    }

    struct SetConfigRequireFlashLoanAuth has copy, drop {
        require_flash_loan_auth: bool,
    }

    struct SetConfigRequireCheckTokenWhiteList has copy, drop {
        require_check_token_white_list: bool,
    }

    struct UpdateMinTradeAmount has copy, drop {
        token: String,
        min_trade_amount: u64,
    }

    // === Functions ===

    // Check package version of the `package_version` in `GlobalConfig` and `VERSION` in current package.
    public fun checked_package_version(_config: &GlobalConfig) {
        abort 0
    }

    // Update the package version.
    public fun update_package_version(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _version: u64) {
        abort 0
    }

    // Get the current package version.
    public fun package_version(): u64 {
        abort 0
    }

    // Add token and its minimum trade quantity limit in token white list.
    public fun add_into_token_list<Coin>(_config: &mut GlobalConfig, _min_trade_amount: u64, _ctx: &TxContext) {
        abort 0
    }

    // Delete token from token white list
    public fun remove_from_token_list<Coin>(_config: &mut GlobalConfig, _ctx: &TxContext) {
        abort 0
    }

    // Get the configuration deletion grace period.
    public fun get_config_deletion_grace_period(_config: &GlobalConfig): u64 {
        abort 0
    }

    // Set the configuration deletion grace period.
    public fun set_config_deletion_grace_period(_config: &mut GlobalConfig, _new_grace_period: u64, _ctx: &TxContext) {
        abort 0
    }

    // Get if flash loan authorization is required.
    public fun get_config_require_flash_loan_auth(_config: &GlobalConfig): bool {
        abort 0
    }

    // Set if flash loan authorization is required.
    public fun set_config_require_flash_loan_auth(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _need_auth: bool) {
        abort 0
    }

    // Get if token white list check is required.
    public fun get_config_require_check_token_white_list(_config: &GlobalConfig): bool {
        abort 0
    }

    // Set if token white list check is required.
    public fun set_config_require_check_token_white_list(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _need_check: bool) {
        abort 0
    }

    // Set role for member.
    public fun set_roles(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _member: address, _roles: u128) {
        abort 0
    }

    // Add a role for member.
    public fun add_role(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _member: address, _role: u8) {
        abort 0
    }

    // Remove a role for member.
    public fun remove_role(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _member: address, _role: u8) {
        abort 0
    }

    // Remove a member from ACL.
    public fun remove_member(_admin_cap: &AdminCap, _config: &mut GlobalConfig, _member: address) {
        abort 0
    }

    // Get all members in ACL.
    public fun get_members(_config: &GlobalConfig): vector<acl::Member> {
        abort 0
    }
}
