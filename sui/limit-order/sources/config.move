// Copyright (C) Cetus Technology Limited

#[allow(unused_type_parameter, unused_field, unused_const, unused_use)]
// The factory module is provided to create and manage limit order pools.
// The `OrderPools` is a singleton, and it is initialized when the contract is deployed.
// The pools are organized in a linked list, and the key is generated by hash([coin_type_a + coin_type_b]). The details can be found in `new_pool_key` function.
// When creating a pool, the `CoinTypeA` and `CoinTypeB` must be different, and the `CoinTypeA` must be the bigger one (string order).
module limit_order::config {
    use std::type_name::TypeName;
    use std::ascii::String;

    use sui::object::{ID, UID};
    use sui::tx_context::TxContext;

    use limit_order::acl::ACL;

    // === Constants ===

    // Package version
    const VERSION: u64 = 1;

    // Limit order ACL roles
    const ACL_TOKEN_WHITE_LIST_MANAGER: u8 = 0;
    const ACL_KEEPER: u8 = 1;

    // === Errors ===
    const EPackageVersionDeprecate: u64 = 0;
    const ENoTokenWhiteListManagerPermission: u64 = 1;
    const ENoLoanManagerPermission: u64 = 2;
    const ENotInTokenWhiteList: u64 = 3;

    // === Structs ===

    struct AdminCap has key, store {
        id: UID,
    }

    struct GlobalConfig has key, store {
        id: UID,
        acl: ACL,
        // Limit minimum trade quantity about one token when it used to pay.
        token_white_list: vector<u8>, // Simplified for interface
        deletion_grace_period: u64,
        // Manage the switch on flash loan auth
        require_flash_loan_auth: bool,
        require_check_token_white_list: bool,
        package_version: u64,
    }

    // === Functions ===

    // Check package version of the `package_version` in `GlobalConfig` and `VERSION` in current package.
    public fun checked_package_version(_config: &GlobalConfig) {
        abort 0
    }

    // Get the current package version.
    public fun package_version(): u64 {
        abort 0
    }
}
